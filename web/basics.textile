---
layout: post
title: Basics
next: basics2.textile
---

This lesson covers:
* "About this class":#overview
* "expressions":#expressions
* "values":#val
* "functions":#functions
* "classes":#class
* "basic inheritance":#extends
* "traits":#trait
* "types":#types

h2(#overview). About this class

The first few weeks will cover basic syntax and concepts.  Then we'll start to open it up with more exercises.

Some examples will be given as if written in the interpreter, others as if written in a source file.

Having an interpreter available makes it easy to explore a problem space.


h3. Why Scala?

* 表现力
** functions的一等公民地位
** Closures
* 精简
** 类型推断
** 函数字母值
* Java interopability
** Can reuse java libraries
** Can reuse java tools
** No performance penalty

h3. How Scala?

* Compiles to java bytecode
* Works with any standard JVM
** Or even some non-standard JVMs like Dalvik
** Scala compiler written by author of Java compiler

h3. Think Scala

Scala is not just a nicer Java.  You should learn it with a fresh mind, you will get more out of these classes.

h3. 启动解释器

Start the included <code>sbt console</code>.

<pre>
$ sbt console

[...]

Welcome to Scala version 2.8.0.final (Java HotSpot(TM) 64-Bit Server VM, Java 1.6.0_20).
Type in expressions to have them evaluated.
Type :help for more information.

scala>
</pre>


h2(#expressions). 表达式

<pre>
scala> 1 + 1
res0: Int = 2
</pre>

res0 is an automatically created value name given by the interpreter to the result of your expression.  It has the type Int and contains the Integer 2.

Scala 中(几乎) 所有东西都是表达式

h2(#val). 值

可以给表达式的结果取个名字

<pre>
scala> val two = 1 + 1
two: Int = 2
</pre>

You cannot change the binding to a val.

h3. 变量

If you need to change the binding, you can use a <code>var</code> instead

<pre>
scala> var name = "steve"
name: java.lang.String = steve

scala> name = "marius"
name: java.lang.String = marius
</pre>

h2(#functions). 函数

用 def 创建函数.

<pre>
scala> def addOne(m: Int): Int = m + 1
addOne: (m: Int)Int
</pre>

在Scala中需要指明函参的类型签名。解释器也很乐意给你回显类型签名。

<pre>
scala> val three = addOne(2)
three: Int = 3
</pre>

对于没有参数的函数，括号可以省略

<pre>
scala> def three() = 1 + 2
three: ()Int

scala> three()
res2: Int = 3

scala> three
res3: Int = 3
</pre>

h3. 匿名函数

You can create anonymous functions.

<pre>
scala> (x: Int) => x + 1
res2: (Int) => Int = <function1>
</pre>

This function adds 1 to an Int named x.

<pre>
scala> res2(1)
res3: Int = 2
</pre>

You can pass anonymous functions around or save them into vals.

<pre>
scala> val addOne = (x: Int) => x + 1
addOne: (Int) => Int = <function1>

scala> addOne(1)
res4: Int = 2
</pre>

函数中的表达式太多时，可以用{}给它们圈一片地。

<pre>
def timesTwo(i: Int): Int = {
  println("hello world")
  i * 2
}
</pre>

This is also true of an anonymous function

<pre>
scala> { i: Int =>
  println("hello world")
  i * 2
}
res0: (Int) => Int = <function1>
</pre>

在将匿名函数作为参数传递时经常会这样写。

h3. 偏序应用

You can partially apply a function with an 下划线,相当于又多了个函数. 下划线在不同的情景下有不同的含义，但一般都是用作未命名的魔力通配符. In the context of `{ _ + 2 }` it means an 未命名参数. You can use it like so:

<pre>
scala> def adder(m: Int, n: Int) = m + n
adder: (m: Int,n: Int)Int
</pre>

<pre>
scala> val add2 = adder(2, _:Int)
add2: (Int) => Int = <function1>

scala> add2(3)
res50: Int = 5
</pre>

不要被上面的例子迷惑，偏序不光适用于最后一个参数，任何一个都行.

h3. Curried函数

谨以此纪念美国逻辑学家Haskell Brooks Curry，函数式编程思想的奠基人。

使用这种函数，不用一次给出它的所有参数，可以分期.

Here's an example of a function that lets you build multipliers of two numbers together. At one call site, you'll decide which is the multiplier and at a later call site, you'll choose a multipicand.

<pre>
scala> def multiply(m: Int)(n: Int): Int = m * n
multiply: (m: Int)(n: Int)Int
</pre>

You can call it directly with both arguments.

<pre>
scala> multiply(2)(3)
res0: Int = 6
</pre>

You can fill in the first parameter and partially apply the second.

<pre>
scala> val timesTwo = multiply(2) _
timesTwo: (Int) => Int = <function1>

scala> timesTwo(3)
res1: Int = 6
</pre>

所有多参函数都可以被curry。Let's try with our earlier <code>adder</code>

<pre>
scala> (adder _).curried
res1: (Int) => (Int) => Int = <function1>
</pre>

h3. Variable length arguments

There is a special syntax for methods that can take parameters of a repeated type. To apply String's `capitalize` function to several strings, you might write:

<pre>
def capitalizeAll(args: String*) = {
  args.map { arg =>
    arg.capitalize
  }
}

scala> capitalizeAll("rarity", "applejack")
res2: Seq[String] = ArrayBuffer(Rarity, Applejack)
</pre>

h2(#class). 类

<pre>
scala> class Calculator {
     |   val brand: String = "HP"
     |   def add(m: Int, n: Int): Int = m + n
     | }
defined class Calculator

scala> val calc = new Calculator
calc: Calculator = Calculator@e75a11

scala> calc.add(1, 2)
res1: Int = 3

scala> calc.brand
res2: String = "HP"
</pre>

Contained are examples are defining methods with def and fields with val.  方法就是能获取类状态的函数.

h3. 构造器

Constructors aren't special methods, 只是类中不在方法定义里的代码.  Let's extend our Calculator example to take a constructor argument and use it to initialize internal state.

<pre>
class Calculator(brand: String) {
  /**
   * A constructor.
   */
  val color: String = if (brand == "TI") {
    "blue"
  } else if (brand == "HP") {
    "black"
  } else {
    "white"
  }

  // An instance method.
  def add(m: Int, n: Int): Int = m + n
}
</pre>

Note the two different styles of comments.

You can use the constructor to construct an instance:

<pre>
scala> val calc = new Calculator("HP")
calc: Calculator = Calculator@1e64cc4d

scala> calc.color
res0: String = black
</pre>

h3. 表达式

Our BasicCalculator example gave an example of how Scala is expression-oriented.  The value color was bound based on an if/else expression. Scala is highly expression-oriented: 大部分东西都是表达式，而不是语句。

h3. Aside: Functions vs Methods

Functions and methods are largely interchangeable. Because functions and methods are so similar, you might not remember whether that <em>thing</em> you call is a function or a method. When you bump into a difference between methods and functions, it might confuse you.

<pre>
scala> class C {
     |   var acc = 0
     |   def minc = { acc += 1 }
     |   val finc = { () => acc += 1 }
     | }
defined class C

scala> val c = new C
c: C = C@1af1bd6

scala> c.minc // calls c.minc()

scala> c.finc // returns the function as a value:
res2: () => Unit = <function0>
</pre>

When you can call one "function" without parentheses but not another, you might think <em>Whoops, I thought I knew how Scala functions worked, but I guess not. Maybe they sometimes need parentheses?</em> You might understand functions, but be using a method.

In practice, you can do great things in Scala while remaining hazy on the difference between methods and functions. If you're new to Scala and read <a href="https://www.google.com/search?q=difference+scala+function+method">explanations of the differences</a>, you might have trouble following them. That doesn't mean you're going to have trouble using Scala. It just means that the difference between functions and methods is 太微不足道了 such that explanations tend to dig into deep parts of the language.

h2(#extends). 继承

<pre>
class ScientificCalculator(brand: String) extends Calculator(brand) {
  def log(m: Double, base: Double) = math.log(m) / math.log(base)
}
</pre>

*See Also* Effective Scala points out that a <a href="http://twitter.github.com/effectivescala/#Types%20and%20Generics-Type%20aliases">Type alias</a> is better than <code>extends</code> if the subclass isn't actually different from the superclass. A Tour of Scala describes <a href="http://www.scala-lang.org/node/125">Subclassing</a>.

h3. Overloading methods

<pre>
class EvenMoreScientificCalculator(brand: String) extends ScientificCalculator(brand) {
  def log(m: Int): Double = log(m, math.exp(1))
}
</pre>

h3. Abstract Classes

You can define an <em>abstract class</em>, a class that defines some methods but does not implement them. Instead, subclasses that extend the abstract class define these methods. You can't create an instance of an abstract class.

<pre>
scala> abstract class Shape {
     |   def getArea():Int    // subclass should define this
     | }
defined class Shape

scala> class Circle(r: Int) extends Shape {
     |   def getArea():Int = { r * r * 3 }
     | }
defined class Circle

scala> val s = new Shape
<console>:8: error: class Shape is abstract; cannot be instantiated
       val s = new Shape
               ^

scala> val c = new Circle(2)
c: Circle = Circle@65c0035b
</pre>

h2(#trait). 特质

<code>traits</code> are collections of fields and behaviors that you can extend or mixin to your classes.

<pre>
trait Car {
  val brand: String
}

trait Shiny {
  val shineRefraction: Int
}
</pre>

<pre>
class BMW extends Car {
  val brand = "BMW"
}
</pre>

One class can extend several traits using the <code>with</code> keyword:

<pre>
class BMW extends Car with Shiny {
  val brand = "BMW"
  val shineRefraction = 12
}
</pre>

*See Also* Effective Scala has opinions about <a href="http://twitter.github.com/effectivescala/#Object oriented programming-Traits">trait</a>.

*When do you want a Trait instead of an Abstract Class?* If you want to define an interface-like type, you might find it difficult to choose between a trait or an abstract class. Either one lets you define a type with some behavior, asking extenders to define some other behavior. Some rules of thumb:

<ul>
<li>traits优先. It's handy that a class can extend several traits; a class can extend only one class.
<li>需要用带参数的构造器时, 用抽象类. Abstract class constructors can take paramaters; trait constructors can't. For example, you can't say <code>trait t(i: Int) {}</code>; the <code>i</code> parameter is illegal.
</ul>

You are not the first person to ask this question. See fuller answers at "stackoverflow:Scala traits vs abstract classes":http://stackoverflow.com/questions/1991042/scala-traits-vs-abstract-classes, "Difference between Abstract Class and Trait":http://stackoverflow.com/questions/2005681/difference-between-abstract-class-and-trait, and "Programming in Scala: To trait, or not to trait?":http://www.artima.com/pins1ed/traits.html#12.7

h2(#types). 类型

Earlier, you saw that we defined a function that took an <code>Int</code> which is a type of Number. Functions can also be generic and work on any type. When that occurs, you'll see a 类型参数 introduced with the 方括号. Here's an example of a Cache of generic Keys and Values.

<pre>
trait Cache[K, V] {
  def get(key: K): V
  def put(key: K, value: V)
  def delete(key: K)
}
</pre>

Methods can also have type parameters introduced.

<pre>
def remove[K](key: K)
</pre>
